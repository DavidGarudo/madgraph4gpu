include ../../Source/make_opts
FFLAGS+= -w
EPOCHDIR=epochX
LANGDIR=sycl
PROCESSDIR=gg_ttgg.auto
MEBASEDIR=/home/nnichols/mg_nsn_fork/$(EPOCHDIR)/$(LANGDIR)/$(PROCESSDIR)
MELIBDIR=$(MEBASEDIR)/lib
MEINCDIR=$(MEBASEDIR)/include
TOOLSINCDIR=/home/nnichols/mg_nsn_fork/tools

DPCPP_HOME=/home/nnichols/workspace_gpu_a100/sycl_workspace_cuda_11.4.0
DPCPP_BIN=$(DPCPP_HOME)/llvm/build/bin
DPCPP_EXE=$(DPCPP_BIN)/clang++

# Load additional dependencies of the bias module, if present
ifeq (,$(wildcard ../bias_dependencies))
BIASDEPENDENCIES =
else
include ../bias_dependencies
endif

# Definitions

LIBDIR = ../../lib/
BINDIR = ../../bin/
PROG   = madevent

ifneq ("$(wildcard ../MadLoop_makefile_definitions)","")
    include ../MadLoop_makefile_definitions
else
    LINK_LOOP_LIBS =
    LOOP_LIBS =
    LOOP_INCLUDE =
    LINK_MADLOOP_LIB =
    MADLOOP_LIB =
endif

LINKLIBS = $(LINK_MADLOOP_LIB) $(LINK_LOOP_LIBS) -L../../lib/ -ldhelas -ldsample -lmodel -lgeneric -lpdf -lcernlib $(llhapdf) -lbias 

LIBS = $(LIBDIR)libbias.$(libext) $(LIBDIR)libdhelas.$(libext) $(LIBDIR)libdsample.$(libext) $(LIBDIR)libgeneric.$(libext) $(LIBDIR)libpdf.$(libext) $(LIBDIR)libmodel.$(libext) $(LIBDIR)libcernlib.$(libext) $(MADLOOP_LIB) $(LOOP_LIBS)

# Source files

MATRIX_HEL = $(patsubst %.f,%.o,$(wildcard matrix*_orig.f))
MATRIX = $(patsubst %.f,%.o,$(wildcard matrix*_optim.f))
ifeq ($(strip $(MATRIX_HEL)),)
        MATRIX = $(patsubst %.f,%.o,$(wildcard matrix*.f))
endif


PROCESS= driver.o myamp.o genps.o unwgt.o setcuts.o get_color.o \
         cuts.o cluster.o reweight.o initcluster.o addmothers.o setscales.o \
	 idenparts.o dummy_fct.o \
         $(patsubst %.f,%.o,$(wildcard auto_dsig*.f)) \

SYMMETRY = symmetry.o idenparts.o

BRIDGE = f2cpp_bridge.a

MEOBJS = read_slha.o Parameters_sm.o CPPProcess.o

$(PROG): $(PROCESS) auto_dsig.o $(LIBS) $(MATRIX) $(BRIDGE) $(MEOBJS)
#	$(FC) -o $(PROG) $(PROCESS) $(MATRIX) $(BRIDGE) $(LINKLIBS) $(LDFLAGS) $(BIASDEPENDENCIES) -L$(DPCPP_HOME)/llvm/build/lib -lsycl -fopenmp
	$(DPCPP_EXE) -fsycl -fsycl-targets=nvptx64-nvidia-cuda --cuda-include-ptx=sm_80 -fsycl-unnamed-lambda --cuda-path=/soft/compilers/cuda/cuda-11.4.0 -o $(PROG) $(PROCESS) $(MATRIX) $(BRIDGE) $(MEOBJS) $(LINKLIBS) $(LDFLAGS) $(BIASDEPENDENCIES) -L$(DPCPP_HOME)/llvm/build/lib -lsycl -L/soft/compilers/gcc/9.2.0/linux-rhel7-x86_64/lib64 -lgfortran -fopenmp=libgomp

$(PROG)_forhel: $(PROCESS) auto_dsig.o $(LIBS) $(MATRIX_HEL) $(BRIDGE) $(MEOBJS)
#	$(FC) -o $(PROG)_forhel $(PROCESS) $(MATRIX_HEL) $(BRIDGE) $(LINKLIBS) $(LDFLAGS) -L$(DPCPP_HOME)/llvm/build/lib -lsycl $(BIASDEPENDENCIES) -fopenmp
	$(DPCPP_EXE) -fsycl -fsycl-targets=nvptx64-nvidia-cuda --cuda-include-ptx=sm_80 -fsycl-unnamed-lambda --cuda-path=/soft/compilers/cuda/cuda-11.4.0 -o $(PROG)_forhel $(PROCESS) $(MATRIX_HEL) $(BRIDGE) $(MEOBJS) $(LINKLIBS) $(LDFLAGS) -L$(DPCPP_HOME)/llvm/build/lib -lsycl $(BIASDEPENDENCIES) -L/soft/compilers/gcc/9.2.0/linux-rhel7-x86_64/lib64 -lgfortran -fopenmp=libgomp
#	$(FC) -o $(PROG)_forhel.o -c $(PROCESS) $(MATRIX_HEL) $(LINKLIBS) $(LDFLAGS) $(BIASDEPENDENCIES) -fopenmp
#	$(DPCPP_EXE) $(PROG)_forhel.o -o $(PROG)_forhel.o -L$(DPCPP_HOME)/llvm/build/lib -lsycl

#$ g++ -c main.cpp
# dpcpp main.o sycl_lib.a -L$SYSL_DIR/lib -lsycl

gensym: $(SYMMETRY) configs.inc $(LIBDIR)libmodel.$(libext) $(LIBDIR)libgeneric.$(libext)
	$(FC) -o gensym $(SYMMETRY) -L../../lib/ -lmodel -lgeneric -lpdf $(llhapdf) $(LDFLAGS)

$(LIBDIR)libmodel.$(libext): ../../Cards/param_card.dat
	cd ../../Source/MODEL; make

$(LIBDIR)libgeneric.$(libext): ../../Cards/run_card.dat
	cd ../../Source; make

$(LIBDIR)libpdf.$(libext):
	cd ../../Source/PDF; make

# Add source so that the compiler finds the DiscreteSampler module.
$(MATRIX): %.o: %.f
	$(FC) $(FFLAGS) $(MATRIX_FLAG) -c $< -I../../Source/ -fopenmp
%.o: %.f
	$(FC) $(FFLAGS) -c $< -I../../Source/ -fopenmp
f2cpp_bridge.a: f2cpp_bridge.cpp
	$(DPCPP_EXE) -g -pthread -ffast-math -DMGONGPU_NTPBMAX=1024 -std=c++20 -O3 -fsycl -fsycl-targets=nvptx64-nvidia-cuda --cuda-include-ptx=sm_80 -fsycl-unnamed-lambda --cuda-path=/soft/compilers/cuda/cuda-11.4.0 -I. -I$(MEBASEDIR)/src -I$(MEBASEDIR)/SubProcesses/P1_Sigma_sm_gg_ttxgg -c $< -shared -fPIC -o f2cpp_bridge.o
	ar rvs $@ f2cpp_bridge.o
read_slha.o: $(MEBASEDIR)/src/read_slha.cc
	$(DPCPP_EXE) -g -pthread -ffast-math -DMGONGPU_NTPBMAX=1024 -std=c++20 -O3 -fsycl -fsycl-targets=nvptx64-nvidia-cuda --cuda-include-ptx=sm_80 -fsycl-unnamed-lambda --cuda-path=/soft/compilers/cuda/cuda-11.4.0 -I. -I$(MEBASEDIR)/src -I$(MEBASEDIR)/SubProcesses/P1_Sigma_sm_gg_ttxgg -c $< -shared -fPIC -o $@
Parameters_sm.o: $(MEBASEDIR)/src/Parameters_sm.cc
	$(DPCPP_EXE) -g -pthread -ffast-math -DMGONGPU_NTPBMAX=1024 -std=c++20 -O3 -fsycl -fsycl-targets=nvptx64-nvidia-cuda --cuda-include-ptx=sm_80 -fsycl-unnamed-lambda --cuda-path=/soft/compilers/cuda/cuda-11.4.0 -I. -I$(MEBASEDIR)/src -I$(MEBASEDIR)/SubProcesses/P1_Sigma_sm_gg_ttxgg -c $< -shared -fPIC -o $@
CPPProcess.o: $(MEBASEDIR)/SubProcesses/P1_Sigma_sm_gg_ttxgg/CPPProcess.cc
	$(DPCPP_EXE) -g -pthread -ffast-math -DMGONGPU_NTPBMAX=1024 -std=c++20 -O3 -fsycl -fsycl-targets=nvptx64-nvidia-cuda --cuda-include-ptx=sm_80 -fsycl-unnamed-lambda --cuda-path=/soft/compilers/cuda/cuda-11.4.0 -I. -I$(MEBASEDIR)/src -I$(MEBASEDIR)/SubProcesses/P1_Sigma_sm_gg_ttxgg -c $< -shared -fPIC -o $@

# /home/nnichols/mg_nsn_fork/epochX/sycl/gg_ttgg.auto/ /home/nnichols/mg_nsn_fork/epochX/sycl/gg_ttgg.auto/ /home/nnichols/mg_nsn_fork/epochX/sycl/gg_ttgg.auto/SubProcesses/P1_Sigma_sm_gg_ttxgg/CPPProcess.cc -o test.e
#-g -pthread -ffast-math -DMGONGPU_COMMONRAND_ONHOST=1 -DMGONGPU_NTPBMAX=1024 -std=c++20 -O3 -fsycl -fsycl-targets=nvptx64-nvidia-cuda --cuda-include-ptx=sm_80 -fsycl-unnamed-lambda --cuda-path=$CUDA_PATH -I$MG_PROJECT_ROOT/src -I$MG_PROJECT_ROOT/../../../tools
#FIXME maybe above needs stuff from line below
#-g -pthread  -I$MG_PROJECT_ROOT/src $MG_PROJECT_ROOT/SubProcesses/P1_Sigma_sm_gg_ttxgg/check_sa.cc $MG_PROJECT_ROOT/src/Parameters_sm.cc $MG_PROJECT_ROOT/src/read_slha.cc -o mg_auto

# Dependencies

driver.f: genps.inc
symmetry.o: genps.inc nexternal.inc configs.inc run_config.inc
genps.o: genps.inc nexternal.inc configs.inc
dummy_fct.0: run.inc genps.inc
cuts.o: genps.inc nexternal.inc pmass.inc
setcuts.o: genps.inc run_config.inc
invarients.o: genps.inc nexternal.inc
myamp.o: props.inc genps.inc nexternal.inc
reweight.o: sudakov.inc cluster.inc sudakov.inc run.inc message.inc \
	    run_config.inc
cluster.o: cluster.inc genps.inc nexternal.inc message.inc
addmothers.o: genps.inc nexternal.inc symswap.inc message.inc
unwgt.o: genps.inc nexternal.inc symswap.inc cluster.inc run.inc message.inc \
	 run_config.inc
initcluster.o: message.inc

clean:
	$(RM) *.o gensym madevent madevent_forhel
